READ THIS BLOG: https://codeforces.com/blog/entry/96699

TOPIC : BINARY SEARCH
Author: Varun11101

We'll be talking about Binary search.

1) What exactly is binary search?
  It's an algo, where in you keep reducing the search space by half, until you find the result you are looking for.
  Since, the search space keeps getting halved, the time complexity is O(logN), where N is the size of the initial search space.
  
  Notice that in binary search, the elements can be represented in the form of a series of Falses and Trues. 
  The elements that do not obey a certain condition is considered to be false, else true.
  This is called as the Predicate function.
  
  For example: Consider an array -> a having n elements. Let's say, the array is sorted, and we need to find the largest element that is smaller than a certain
               target value. Here, we can form the following predicate function:
               
               Consider all the elements that are less than or equal to the target value as True, and the rest as false.
               Now, since the array is sorted, our predicate function will look like this: T T T T .. F F F F
               
               Our task is to simply find the last True. TO detemine whether a certain elements returns true or false, just create a good function which
               is our predicate function.
               

2) Main methods of implemenation of Binary Search:
  a) Classic Binary Search
  
        ll l = 0, r = n-1
        while(l<=r){ //while the search space is still valid
          mid = (l+r)/2
          if( target == f(mid)) ans found
          else if ( target > f(mid) ) l = mid + 1 //ans must lie to the right
          else r = mid - 1 //ans must lie to the left
        }
        
        Weird change that I make to this implementation: 
          if(l+1 == r){
            //logic
          }
          
         Handle this case separately cuz I've faced few TLE without this piece of code. This happens cuz mid would be equal to l in this case, which may
         give rise to some edge cases.
        
          
  b) A better approach -> Invariants method
    
    What are invariants? Invariants are the variables that always follow a certain property no matter what.
    So, we are aware of the fact that we are going to be applaying binary search on some predicate function. This means, that we can maintain two invariants.
    The first invariant will be "l" or "left". It always points to either True/False (whichever covers the left side of the predicate function).
    The other one will be right. We simply check whether the mid element returns True/false and will set l=mid or r=mid accordingly.
    
    l = -1, r = n //making sure that both are out of bounds. 
    Note that, mid is never going to be equal to either -1 or n, since we terminate if l+1 == r. So there's never a case where l == mid
    
    while(r > l+1)
    {
      mid = (l+r)/2
      if(good(mid)) l = mid;
      else r = mid;
    }
    
    In the end, our answer will either be contained in the l pointer or the r pointer depending the the problem.
    
    The above explainations are very abstract, hence if you feel things aren't getting into your head, then it's a good time to revisit CF EDU.
    
3) Various types of binary search problems:
   
   a) STEP 1: Binary search on the array:
      
      In these types of problems, you will have to apply binary search on the array itself. 
      You do this by maintaining two pointers, l = -1, r = n
      Perform binary search by building the required predicate function. In the end, the answer will either be contained in l or r or difference of l and r.
      
      Problems: 
      i)  Find the index of the largest element in the array which is equal to or smaller than the target
          Here, initially l = -1, and r = n.
          l would always point to an element that is smaller than or equal to the target.
         In the end, the answer will be contained in l. But, if l == -1, then all the elements were actually bigger than the target. Then, return -1
      
      2) Find the smallest element that is greater than or equal to x
          Similar problem, but the answer will be contained in r this time.
          
      3) Find whether an element exists in a sorted array or not
          Same stuff, let l maintain the property of always pointed to an element that is smaller than or equal to the target.
          In the end, if(l != -1 && arr[l] == target) then return true, else return false
          
      4) Find the number of elements in the array which lie in the range of [x, y]
         Same stuff, here we just perform double binary search:
         The first binary search is for finding the smallest element that is greater than or equal to x and similarly for y
         If the two pointer answers cross each other, then there does not exist any answer. Else, it is right - left + 1.
         
         
         
   b) STEP 2: BINARY SEARCH ON THE ANSWER
   
      i) Binary Search on INTEGERs: 
      In this case, we do not have any array or such. We directly binary search on the answer.
       We always make sure, we initally set l to a value that follows a certain property and r to a value that follows the complementary property
       i.e if l == good, then r must be bad.
       
       Now, in some cases, if we don't know what the value of r should be so that it is always bad/good, we usually assign it to a big number such as INF.
       Although, this might work for most of the problems, this may overflow in the good function. Be careful that it doesn't overflow, else this is a 
       great way of setting r.
       
       If there are chances of overflow, then use pashka's while(!good(r)) r *= 2 method. Here the condition may vary depending upon the problem.
       
       To check whether the possible answer is good or bad, we must build a good function or a predicate function which returns whether the value is good or bad.
       Now, our aim is either to find the last good element or the first bad element i.e to find the intersection of the predicate function.
       So, we apply the standard condition i.e if(r > l+1), then do this, else do that... this will always work for integers.
       
       Now, can we use the same technique for real numbers i.e numbers involving decimals? Absolutely not, since we are dealing with decimals now.
       
       Then, how do we deal with binary search on real numbers such as finding the square root????
       There are multiple methods, the first common method is:
        i) while(r-l > eps) //then keep doing binary search
            In this method, while the difference of the two invariants is greater than eps, which is a small value, holds true, then it keeps looping.
            However, this has precision issues and such and hence is not a very good method.
            
        ii) Better method -> Just loop for a fixed number of times, Ex: 50 or 100 since even log2(1e18) isn't that big.
            Ex:
              let x = 100
              while(x--){//keep binary searching}
              
         As usual, in the end, either l or r will contain the answer depending upon the problem we are dealing with.
      
      In these problems, i.e binary search on the answer problems, we pass in a possible ans into our good/predicate function.
      The good function performs some logic and then returns true/false. This logic itself is the biggest challenge in these kind of problems.
      
      Approach these problems with the mindset of: "Oh, so is it possible to that our answer is x?. Let me use some series of operations such as loops, maths, sum
        etc. to find whether this is indeed a valid solution. If it is, we return true, else we return false."
        
 
 c) STEP 3: https://codeforces.com/edu/course/2/lesson/6/3
    MINIMAX PROBLEMS: In these kind of problems, you are required to minimize some max value or maximize some minimize value.
    Here, again we binary search on the final answer. Hard to explain.. just read the blog :/
    These problems are usually math based. You apply some maths in the good function to find the logic of whether x is a valid solution or not.
    
d) Step 4: Finding the max average. i.e given an array so so, you need to pick a bunch of elements that give you max avg. Not that important and boring stuff.

e) Step 5: Finding the k-th element: Given a bunch of segments, find the k-th elements if you were to merge and sort them without actually merging them.
          Refer: CF EDU and Leetcode Median of two arrays problem.



For interview prep:

Main problem:
1) Finding the target element in rotated array
2) Finding the minimmum/maximmum element in rotated array

Basic logic in rotated array with no duplicates is that, if the array is not sorted (handle for array == sorted case separately always), 
then, the first element in the array is always greater than the last element in the array. i.e it keeps climbing up, and then falls down and never exceed the starting 
 position of the first part. Try drawing two arrows, where the bottom of the first arrow is always bigger than the last element of the second arrow.
 
 Ex: 4 5 6 1 2 3
 
 Here, in these without duplicate problems, we can easily use our invariant method. 
 Let's say good(pos) == true, if arr[mid] > arr[leftmost_element].
 Then, l would contain the largest element and r would contain the smallest element. Now, you could binary search on one of the parts to find the target.

Basically, in rotated problems, BS involves comparing the mid with left and right pointers.

3) Same stuff, but rotated + duplicates.
   Here, things get a bit complicated. This is one of those problems where invariants fail. We need to use the classical method here.
    Also, note that, the worst cast TIME COMPLEXITY for dupes + rotated array is O(N). 
    Consider the example: 4 4 4 5 4 4 4 4 4 4 or 4 4 4 4 4 4 4 5 4 4, and we are supposed to find the largest element in the array.

  Here l = 4, r = 4, mid = 4. We don't know where the move. So we either BS recursively on both left and right side OR
  the better way is to simply increase left pointer and decrease the right pointer.
  
  If you find a part where the part doesn't seem to be sorted i.e if arr[mid]  > arr[r] or arr[l] > arr[mid], then we know the the largest element or even the smallest
  element must lie in this part. So, shift your search space to that part.
   
   TIP: IN dupes + rotated, first check which part is sorted. And then, check whether the target is in the sorted part. If it is, then shift to search space
        to the sorted space, or shift it to the unsorted space.
        
   NOTE: If both the parts are sorted, then that MUST mean that the array is already sorted. So, to find the minimmum element, search in the first part.

4) Finding the peak -> Consider an array like this: 4 5 6 7 8 8 6 5 4 3 1, and you need to find atleast one peak.
  Invariant method, indeed works here. Let l always point to a rising part or a peak, and r always point to the falling part.
  But edge case, if(arr[n-1] >= arr[n-2]) then, last element is indeed a peak, return that
  Do the same with l, and then if none of them returned a peak, then l must be pointed to a rising part and r must be pointing to a falling part.
  Always maintain this invariant and eventually you will find a peak.
    
   if(arr[mid] >= arr[l]) l = mid; //possible peak
   else r = mid; 


That's it i guess. Just remember. If you ever find a problem that says find min/max or find max of min, min of max, try if binary search is possible, and then
only proceed to other methods.

Solve dupes + rotated array once again later on since invariants can't be applied and hence, it's a pain to deal with.

