*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* Graphs and Trees *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
									- Varun11101
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

Basic terminology:
- Connected components: In an undirected graph, the number of components such that in that particular component, all the nodes are reachable by all other nodes.
- Strongly connectedc components: Similar, but for directed graphs

Trees:
- Depth of a tree: Number of edges between the root and that particular node
- Height of a tree: Number of edges between the particular node and the farthest leaf node
- LCA: Lowest common ancestor: The lowest common parent of the given nodes

Representations for Graphs:
1) Adjacency matrix:
	- Space complexity of: O(N^2)
	- Tells whether two nodes are connected or not in O(1) time / gives the weight of the edge in O(1) time
2) Adjacency List:
	- Space complexity of: O(V+E)
	- This doesn't give the weight/tell whether two nodes are connected or not in O(1) time, instead it is O(E)

DFS: Graph traversal technique
	- Can be done using recursion or stack
	- Explores the depth of a node first 
	- Used to find the number of connected components and cycle detection

Different parts of code involving DFS:
	- 1) Code to be executed upon entering a vertex
	- 2) Code to be executed before entering the vertex's child node
	- 3) Code to be executed after leaving the child node and going back to the parent node
	- 4) Code to be executed after leaving the vertex (parent node)

- Finding the number of connected components
- Finding the connected components
- Number of connected components in a grid

BFS: Breadth first search traversal
	- Main application: To find the shortest path from a source to all the other nodes in an unweighted graph or weighted graph with equal weights!
	- 0-1 BFS: Using deque : Ex problem: REVERSE graph (Codechef problem)

Multi-source BFS: Very important for CP: Snake question from CC, Virus spreading problem, rotten oranges/tomatoes etc.
You start a bfs, but initially you push multiple nodes into the queue. Distance array will contain the answer i.e
	minmmum months/days needed to infect a country (in case of a virus outbreak problem).
	Ex problem: https://www.codechef.com/SNCKPB17/problems/SNSOCIAL/

NOTE: - In questions that requires you to print a path, a cycle, or a parent, you need to maintain the parent array and trace back all your way to the
	beginning to find the answer. 
      - It's better to declare visited, grid, dist array globally.
      - Three main parts in BFS when you are dealing with queue:
		1) Push the element into the queue
		2) Update the distance of the element that you just pushed into the queue
		3) Mark the element as visited

Few practice problems for BFS: CSES problemset Labyrinth, Biridian Forest (CF)


Djikstra's algorithm: Used to finding the shortest path (SSSP) in weighted graphs
	- Intuition behind Djikistra's algo is that the nodes which are at a lesser distance (have a lower edge weight) are reached first.
	- Think of splitting an edge of weight w into w edges having w-1 nodes in between, with each edge having a weight of 1. Now, the first point makes sense.
	- We use a set to achieve this. We push in a pair - {distance, node} into the set. The ones with lesser distance will be processed first.
	- (Similar to the modified BFS that you came up with, except we use a set, since using a regular queue would result in redundant pushes which 
	   increases the time complexity of the algorithm).
	- Visited array is not required, you can use distance array as a visited array.
	- The basic implementation of djikstra algo: 

	set<pair<int,int>> s; //creating a set of pairs {distance from the source, node}
        vector<int> dist(n+1, INF); //distance array which gives the shortest path from source to that node. Initially, everything is at the distance of INF 
        dist[src] = 0; //distance of source node from source is obviously 0 xD
        s.insert({0,src}); //pushing in the source into the set
        while(!s.empty()){ //keep iterating until the set becomes empty
            pair<int,int> cur = *(s.begin()); //we store the element to be processed (current node)
            s.erase(s.begin());		      //and pop it out of the set/priority queue
	    int u_d = cur.first;		      //d stores the distance between cur_node and source
            int u = cur.second;	  	      //u is the current node
            for(auto v : adj[u]){             //we iterate over the connected nodes/children of the current node -> u
                //v -> gives a pair -> {child_node, weight/distance between parent and child node}
                int newdist = v.second + u_d; //new dist -> distance from source to parent + distance from parent to child
                int child_node = v.first;     
                if(newdist < dist[child_node]){ //main condition
                    dist[child_node] = newdist;
                    s.insert({dist[child_node], v.first});
                }
            }
        }

Bipartite graphs: Used to find whether you can split nodes into two groups such that none of in a group connected to any other node in the same group.
	- Main application: Used to detect odd cycles i.e cycles having odd number of nodes in them.

Detecting Cycles in Graphs:
	- Undirected graph: Basic DFS: If you find a child that is already visited and if the child isn't the current node's parent, then cycle exists.
	- Directed graph: DFS: Check github -> You modify the visited array. If you find a child node that is visited and already being processed, then cycle exists.

TREES: 

In and Out time: 
	- This is used in query questions where in each query you are given two nodes and are asked to find whether one of them lies in the subtree of another.
	- Naive approach: For each query, we use the "currently being processed or already processed" method which is used to find cycles in a directed graph.
			  - We start the dfs from the root, and if we find a child, we check whether the parent is being processed or not.
			  - If it is being processed still, that means they lie in the same subtree, else no.
			  - Time compleixty: O(q*(n+e)) which will tle

	- Better approach: Using in and out time. Use calculate the in time (i.e the time at which we enter the node) and out time (the time at which we leave the node)
			   - If they are in the same subtree, then the in time of the parent should be less than that of it's child and
			     the out time of the child should be lesser than the out time of it's parent. If these two conditions satisfy, then the ans is yes, else no.
			  - Time complexity: O(n+e+q)

Finding the longest path in a tree: Same as finding the diameter of the tree
	- Take any node and perform dfs on the node. You will get a node that the farthest distance from this node. This node has to be one of the ends
	  of the longest path. Let's call this node as m1
	- Perform a dfs from m1. Now, the node with the farthest distance from m1 is the other end of the longest path and this distance is the required answer.

Finding the number of nodes or vertices in a subtree:
  Method 1:
	- Can be done using DFS
	- number of nodes in a subtree rooted r1 = 1 (including the root) +  sum of number of nodes in subtree rooted ci (where i = child 1, child 2.. so on)
	- DFS returns int - i.e the number of nodes in a subtree rooted r
	- In the end, while leaving the parent vertex, store the answer inside of a global array which can then be used to answer queries in constant time.
 Method 2: Using In/Out time.
	Number of nodes in a subtree rooted at r = (out_time(r) - in_time(r))/2 + 1

Longest common ancestor: 
	- Can be done in O(N) using multiple methods. 
	- One of the methods: Start a dfs from the root, and store the parent of every node.
	- Create two arrays, the path from node1 to root and path from node2 to root.
	- Compare the arrays, and the node which the first common among both the paths is the answer. (assuming the path starts from the node to the root)


