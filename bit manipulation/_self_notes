                                                                   Topic: Bit Manipulation and Bit Masking
                                                                            Author: Varun11101
                                                                            
                                  ***In a nutshell, bit manipulation mainly involves looking the bits independently and then computing the results***
                                                  ***This simple idea is the basis of most of the bit manipulation problems***

References:
1) CodeNCode Bit Manipulation Playlist
2) Errichto's Bit Manipulation CF Blog
3) Galen Colin's Bit Manipulation theory + Problem solving (Codeforces) videos on YT
4) GeeksForGeeks for Bit tricks
5) Hackerearth's article on Bit Manipulation

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
0) ANY NUMBER CAN BE REPRESENTED AS A SUM OF POWERS OF 2.
  x = 0/1*2pow(n-1) + 0/1*2pow(n-2) +....+ 0/1*2pow(0)
  
  NUMBER OF BITS IN THE NUMBER -> floor(Log2(x))+1 or just find the msb index (using clz function) + 1
  
1) BASIC BIT MANIPULATION

a) Checking whether i-th bit of a number is set or not: if(x & (1LL << i)) "YES", else "NO"
b) Setting i-th bit of a number: x |= (1LL << i);
c) Flipping i-th bit of a number: x ^= (1LL << i);
d) Resetting j-th bit of a number: Check if the j-th bit is set, if it is set, just XOR -> if(x & (1LL << j)) x ^= (1LL << j)
e) Removing the last set bit of a number i.e resetting the LSB of a number: x &= x-1
f) Checking whether a number is a power of 2: if(n&(n-1)==0 && n!=0), then YES. (111 & 1000 would result in 0)

2) SHIFTING A NUMBER TO THE LEFT BY K == MULTIPLYING THE NUMBER BY 2 FOR K TIMES
  Proof: Consider the number 5 -> 101
  5 = 1*2^2 + 0* 2^1 + 1*2^0
  
  Now, let's left shift the number once : x <<= 1. It now results in:
  1*2^3 + 0*2^2 + 1*2^1 + 0*2^0 == 2(1*2^2 + 0* 2^1 + 1*2^0) -> 2*5 -> 10
  
  Similarly, shifting a number to the right by k times == dividing the number by 2 for k times
  
  3) BINARY REPRSENTATION OF A 32 BIT SIGNED INTEGER
  Loop from 31st bit to 0th bit, if the bit is set, print 1, else 0
  
  4) Use 1LL instead of 1 cuz using just 1 makes it a constant integer data type which has good chances for overflow while dealing with large numbers.
  
  5) Number of numbers having n-th bit as their MSB is: 2pow(n-1) to 2pow(n)-1
  
  6) 0's and 1's in the i-th bit in a binary table alternates after every 1 << i times
  
  7) Maximmum range for a signed n bit integer: 2pow(n-1)-1 to -2pow(n-1) [Note: One extra neg number occurs because of the two's complement rule]
  
  8) BUILT-IN FUNCTIONS IN C++
    a) __builtin_popcountll(x) -> returns the number of set bits in a long long integer
    b) __builtin_ctzll(x) -> returns the number of trailing zeroes in a number. Application: To find the LSB
    c) __builtin_clzll(x) -> returns the number of leading zeroes in a number. Application: To find the MSB
    
    NOTE: These functions crash for x = 0
    
    To find the MSB: 63 - __builtin_clzll(x)
    To find the LSB: __builtin_ctzll(x)
    
9) MSB >>>> all the other significant bits in the number. This idea is very important in greedy problems.

10) XOR and PROPERTIES OF XOR (VERY IMPORTANT PART!)
  a) A ^ 0 = A                        [Anything XOR'd with 0 gives back the number itself]
  b) A ^ A = 0                        [A number XOR'd with itself resets to 0]
  c) A ^ (B ^ C) = (A ^ B) ^ C        [Basically, the ordering of XOR doesn't matter!]
  d) if(A ^ B = C), then (B ^ C = A) and (A ^ C = B)
  
  VERY IMPORTANT XOR PROPERTY: EVEN/ODD PROPERTY:
    If a number occurs EVEN number of times in an array, and if you XOR the entire array, the number will be thanos snapped from the array.
    If a number occurs ODD number of times in an array, then in the end, it occurs ONLY ONCE in the array.
    
    THIS VERY IDEA of EVEN occurances reducing to dust and ODD occurances reducing to a single copy forms the basis of multiple bit manip problems.
    Ex: XOR of XOR of all subsets in the array:
      Solution: For each element, compute the number of times it occurs in a subarray using the contribution trick (i.e (left+1)*(right+1)).
        If the element occurs even number of times, it is wiped out i.e it doesn't contribute to the final ans at all.
        If the element occurs odd number of times, it contributes to the final ans only once.
        
    VERY IMPORTANT LEARNING: If there is a question involving purely XOR a bunch of elements and nothing else in the form of some kind of equation, or any other form,
                  it, just boils down to calculating the number of times it occurs, if even, it doesn't contribute to the final answer at all, if it occurs
                  odd number of times, it just contributes ONCE to the final answer.
  
  Few less important properties:
  a) A + B = (A & B) + (A | B)
  b) A + B = (A ^ B) + 2 * (A & B)
  
11) PREFIX XORS -> VERY IMPORTANT in calculating the XOR subarray queries
  Given Q queries, each query having L and R (left and right index of the range), find the XOR over L to R.
  In these questions, similar to prefix sums, create a prefix xor array.  
  XOR over L to R -> pref[R] - pref[L-1] (Provided L != 0)
  
 12) In questions like Single number 2 (Leetcode) where you need to find the only occuring number in an array of numbers occuring thrice, you look bit by bit,
    try to find which bit is active for the required number, and add it to the res.
    int res = 0;
    for(int i=0; i<32; i++){
      if(the bit is set for the required number) res += (1LL << i)
    }
    
    Just remember the fact that any number is a sum of powers of 2 and you can add (1LL << i) to the result to compute the final number.
    
13) XOR SUM PROBLEMS: ******************** VERY VERY VERY VERY IMPORTANT **********************
  XOR Sum problems are of the type: 
    (a1 ^ a2 ^ a3...)  + (a2 ^ a3 ^ ......) + (....^..^..^) + ....... n terms
    
    Ex problem: https://atcoder.jp/contests/abc147/tasks/abc147_d
    
    Find the XOR sum of all the unordered pairs (i.e i < j) in the array (a1 ^ a2) + (a1 ^ a3) + ... + (a(n-1) ^ an )
    Let's say number of terms (n) <= 1e5
    
    How do you solve these kind of problems?
    Naive brute force solution: N^2 loop and find the result. This would TLE.
    Approach to these kind of problems:
      
      Check/Find how many terms have the i-th bit set i.e how many terms contribute to the i-th bit.
      i.e Find the number of terms contributing to the i-th bit. Let it be "count".
      Initially let res = 0;
      Now, res += count * (1LL << i); //EXTREMELY IMPORTANT
      1LL << i: gives the contribution of a single i-th bit. Multiply it by count since count number of terms contribute to the i-th bit. This idea is crucial.
      Iterate over all bits, and find the number of terms contributing to it, and add count * (1LL << i) to the answer.
      
      Now, how do you find the number of terms contributing to it? This is usually done by some precomputing or simple combinatorics.
      In this problem, we can find the number of pairs contributing to the i-th bit, by finding the number of numbers in the array having i-th bit set and i-th bit
      not set and multiply them to find the count of distinct pairs that contribute to this bit.
      
      
 14) PROBLEM TYPE: Finding the only occurance of a number in a array, where every other number than this number occurs x number of times
  -> If x == 2, we just XOR everything, and by the Even/Odd trick that is discussed earlier, even occurances of numbers will be thanos snapped and the sole 
    survivor is our hero, the lone wolf, single occurance element.
   
  -> If x == 3, then we use the idea of indepenedent bits again. 
    We iterate bit by bit and find out the number of numbers having the bit set in the array. Notice that since each element except one occurs 3 times,
    the count of numbers who contribute to that bit must be a multiple of 3 IF the lone wolf element DOES NOT contribute to the bit.
    Else it would be of the form, 3x + 1 i.e count%3==1. Then, you would know that this bit is active in our lone wolf element.
    Just add res += (1LL << i) [Rule of: Any number can be represented in the form of sum of 2 powers and if we know what bits are set for a number,
      we can easily retreive the number by summing up the contribution of each bit to the result i.e res += (1LL << i)]
      
   -> If x>3, the same logic applies. count%4 == 1, then that bit is set for the number. You get the idea. 
   
   Learnings: 
    -> Any number can be represented in the form of powers of 2 
    -> XOR Properties
    -> Prefix XORs
    -> XOR Sum type of problems
    -> Finding the element with single occurance type of problems
    -> Most importantly, looking at the answer by considering elements bit by bit.
    -> Contribution technique
    -> Even/Odd trick
    -> Greedy idea of MSB >>> Every other significant bit combined
    ....bunch of other things.
    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                      Topic 2: BITSETS and BITMASKING

     
BITSETS: Inbuilt data structure in C++

-> Max size of a bitset can be upto 1e9

1) Declaration/Initialization:
Note: size cannot be determined during run-time, it must be set to a number or a constant variable while writing the program.
 a) bitset<size> name;
      name = 15;
 b) bitset<size> name(15);
 
 c) bitset<size> name("11101"); //Can also pass in a binary string 
 
2) Accessing: Indexing is reversed here. 0-th index refers to the 0-th bit.
    cout << name[0]; //Prints the 0-th bit
    cout << name; //Prints the entire bitset

3) Few functions: set(), flip(), reset(), count(), any(), none() etc. Self explanatory

4) Converting bitset to number: bs_name.to_ullong(); (Bitset to long long)
                                bs_name.to_ulong(); //unsigned_long 
                                bs_name.to_string(); //Converts to string
               
5) Vector of bitsets: vector<bitset<1000>> v(100); //Creates a vector having 100 bitsets having 1000 bits each.



                                                                    -- BITMASKING --
                                                                    
Bitmasking refers to representing each element/entity as a bit. If the bit is set, then it means the element is present, else not.
Bitmasking is useful when you are asked problems based on "INTERSECTIONS" such as:
  a) Find the pair of workers who share the most number of days in a year
  b) Count the triangles in an undirected graph ... so on. 
  
 Usually, when the constraints of the values are low, then bitmasking can be easily done.
 
 In Counting the number of triangles in an undirected graph:
  Naive approach would be to check whether 3 vertices form a triangle of not using an O(N^3) algorithm.
  Efficent way would be to iterate over all edges, and in the adjacency bitmask (adjacency bitmask: a bit is set if the current vertex is directly connected to another vertex b.
        Each vertex/node is represented as a bit) of both the vertices, check the intersection by AND operation to find out the number of common vertex and add this to the res.
        Finally, after doing this to every vertex, print res/3 since each triangle will be counted thrice.
        
 Refer to Errichto's CF blog for explaination and practice problems on bitmasking.



  
  
  
  
  
